// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BlogHTTPServer interface {
	ListBlog(context.Context, *ListBlogRequest) (*ListBlogReply, error)
}

func RegisterBlogHTTPServer(s *http.Server, srv BlogHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/blog/", _Blog_ListBlog0_HTTP_Handler(srv))
}

func _Blog_ListBlog0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBlogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.blog.v1.Blog/ListBlog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlog(ctx, req.(*ListBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBlogReply)
		return ctx.Result(200, reply)
	}
}

type BlogHTTPClient interface {
	ListBlog(ctx context.Context, req *ListBlogRequest, opts ...http.CallOption) (rsp *ListBlogReply, err error)
}

type BlogHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogHTTPClient(client *http.Client) BlogHTTPClient {
	return &BlogHTTPClientImpl{client}
}

func (c *BlogHTTPClientImpl) ListBlog(ctx context.Context, in *ListBlogRequest, opts ...http.CallOption) (*ListBlogReply, error) {
	var out ListBlogReply
	pattern := "/v1/blog/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.blog.v1.Blog/ListBlog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
